// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: drops/drops.proto

package dropsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DropsClient is the client API for Drops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsClient interface {
	AddAccount(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dropsClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsClient(cc grpc.ClientConnInterface) DropsClient {
	return &dropsClient{cc}
}

func (c *dropsClient) AddAccount(ctx context.Context, in *CheckoutRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.Drops/AddAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsServer is the server API for Drops service.
// All implementations must embed UnimplementedDropsServer
// for forward compatibility
type DropsServer interface {
	AddAccount(context.Context, *CheckoutRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDropsServer()
}

// UnimplementedDropsServer must be embedded to have forward compatible implementations.
type UnimplementedDropsServer struct {
}

func (UnimplementedDropsServer) AddAccount(context.Context, *CheckoutRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccount not implemented")
}
func (UnimplementedDropsServer) mustEmbedUnimplementedDropsServer() {}

// UnsafeDropsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsServer will
// result in compilation errors.
type UnsafeDropsServer interface {
	mustEmbedUnimplementedDropsServer()
}

func RegisterDropsServer(s grpc.ServiceRegistrar, srv DropsServer) {
	s.RegisterService(&Drops_ServiceDesc, srv)
}

func _Drops_AddAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).AddAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.Drops/AddAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).AddAccount(ctx, req.(*CheckoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drops_ServiceDesc is the grpc.ServiceDesc for Drops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.Drops",
	HandlerType: (*DropsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccount",
			Handler:    _Drops_AddAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}
