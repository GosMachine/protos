// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: drops/drops.proto

package dropsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DropsClient is the client API for Drops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsClient interface {
	RunGame(ctx context.Context, in *RunGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RunChannels(ctx context.Context, in *RunChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetActiveGamesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveGamesInfoResponse, error)
}

type dropsClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsClient(cc grpc.ClientConnInterface) DropsClient {
	return &dropsClient{cc}
}

func (c *dropsClient) RunGame(ctx context.Context, in *RunGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.Drops/RunGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) RunChannels(ctx context.Context, in *RunChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.Drops/RunChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.Drops/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) GetActiveGamesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveGamesInfoResponse, error) {
	out := new(GetActiveGamesInfoResponse)
	err := c.cc.Invoke(ctx, "/drops.Drops/GetActiveGamesInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsServer is the server API for Drops service.
// All implementations must embed UnimplementedDropsServer
// for forward compatibility
type DropsServer interface {
	RunGame(context.Context, *RunGameRequest) (*emptypb.Empty, error)
	RunChannels(context.Context, *RunChannelsRequest) (*emptypb.Empty, error)
	Stop(context.Context, *StopRequest) (*emptypb.Empty, error)
	GetActiveGamesInfo(context.Context, *emptypb.Empty) (*GetActiveGamesInfoResponse, error)
	mustEmbedUnimplementedDropsServer()
}

// UnimplementedDropsServer must be embedded to have forward compatible implementations.
type UnimplementedDropsServer struct {
}

func (UnimplementedDropsServer) RunGame(context.Context, *RunGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGame not implemented")
}
func (UnimplementedDropsServer) RunChannels(context.Context, *RunChannelsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunChannels not implemented")
}
func (UnimplementedDropsServer) Stop(context.Context, *StopRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDropsServer) GetActiveGamesInfo(context.Context, *emptypb.Empty) (*GetActiveGamesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveGamesInfo not implemented")
}
func (UnimplementedDropsServer) mustEmbedUnimplementedDropsServer() {}

// UnsafeDropsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsServer will
// result in compilation errors.
type UnsafeDropsServer interface {
	mustEmbedUnimplementedDropsServer()
}

func RegisterDropsServer(s grpc.ServiceRegistrar, srv DropsServer) {
	s.RegisterService(&Drops_ServiceDesc, srv)
}

func _Drops_RunGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).RunGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.Drops/RunGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).RunGame(ctx, req.(*RunGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_RunChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).RunChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.Drops/RunChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).RunChannels(ctx, req.(*RunChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.Drops/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_GetActiveGamesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).GetActiveGamesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.Drops/GetActiveGamesInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).GetActiveGamesInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Drops_ServiceDesc is the grpc.ServiceDesc for Drops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.Drops",
	HandlerType: (*DropsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunGame",
			Handler:    _Drops_RunGame_Handler,
		},
		{
			MethodName: "RunChannels",
			Handler:    _Drops_RunChannels_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _Drops_Stop_Handler,
		},
		{
			MethodName: "GetActiveGamesInfo",
			Handler:    _Drops_GetActiveGamesInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}

// DropsCenterClient is the client API for DropsCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsCenterClient interface {
	UpdateAccounts(ctx context.Context, in *UpdateAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	UpdateGameWorkers(ctx context.Context, in *UpdateGameWorkersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGameChannels(ctx context.Context, in *UpdateGameChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllGameNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGameNamesResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dropsCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsCenterClient(cc grpc.ClientConnInterface) DropsCenterClient {
	return &dropsCenterClient{cc}
}

func (c *dropsCenterClient) UpdateAccounts(ctx context.Context, in *UpdateAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/UpdateAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/AddGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/AddAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error) {
	out := new(GetGamesResponse)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/GetAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateGameWorkers(ctx context.Context, in *UpdateGameWorkersRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/UpdateGameWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateGameChannels(ctx context.Context, in *UpdateGameChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/UpdateGameChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetAllGameNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGameNamesResponse, error) {
	out := new(GetAllGameNamesResponse)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/GetAllGameNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/drops.DropsCenter/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsCenterServer is the server API for DropsCenter service.
// All implementations must embed UnimplementedDropsCenterServer
// for forward compatibility
type DropsCenterServer interface {
	UpdateAccounts(context.Context, *UpdateAccountsRequest) (*emptypb.Empty, error)
	AddGame(context.Context, *AddGameRequest) (*emptypb.Empty, error)
	AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error)
	GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	UpdateGameWorkers(context.Context, *UpdateGameWorkersRequest) (*emptypb.Empty, error)
	UpdateGameChannels(context.Context, *UpdateGameChannelsRequest) (*emptypb.Empty, error)
	GetAllGameNames(context.Context, *emptypb.Empty) (*GetAllGameNamesResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDropsCenterServer()
}

// UnimplementedDropsCenterServer must be embedded to have forward compatible implementations.
type UnimplementedDropsCenterServer struct {
}

func (UnimplementedDropsCenterServer) UpdateAccounts(context.Context, *UpdateAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccounts not implemented")
}
func (UnimplementedDropsCenterServer) AddGame(context.Context, *AddGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedDropsCenterServer) AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccounts not implemented")
}
func (UnimplementedDropsCenterServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedDropsCenterServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedDropsCenterServer) UpdateGameWorkers(context.Context, *UpdateGameWorkersRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameWorkers not implemented")
}
func (UnimplementedDropsCenterServer) UpdateGameChannels(context.Context, *UpdateGameChannelsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameChannels not implemented")
}
func (UnimplementedDropsCenterServer) GetAllGameNames(context.Context, *emptypb.Empty) (*GetAllGameNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGameNames not implemented")
}
func (UnimplementedDropsCenterServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDropsCenterServer) mustEmbedUnimplementedDropsCenterServer() {}

// UnsafeDropsCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsCenterServer will
// result in compilation errors.
type UnsafeDropsCenterServer interface {
	mustEmbedUnimplementedDropsCenterServer()
}

func RegisterDropsCenterServer(s grpc.ServiceRegistrar, srv DropsCenterServer) {
	s.RegisterService(&DropsCenter_ServiceDesc, srv)
}

func _DropsCenter_UpdateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/UpdateAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateAccounts(ctx, req.(*UpdateAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/AddGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).AddGame(ctx, req.(*AddGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_AddAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).AddAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/AddAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).AddAccounts(ctx, req.(*AddAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/GetAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateGameWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateGameWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/UpdateGameWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateGameWorkers(ctx, req.(*UpdateGameWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateGameChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateGameChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/UpdateGameChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateGameChannels(ctx, req.(*UpdateGameChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetAllGameNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetAllGameNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/GetAllGameNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetAllGameNames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drops.DropsCenter/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropsCenter_ServiceDesc is the grpc.ServiceDesc for DropsCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropsCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.DropsCenter",
	HandlerType: (*DropsCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAccounts",
			Handler:    _DropsCenter_UpdateAccounts_Handler,
		},
		{
			MethodName: "AddGame",
			Handler:    _DropsCenter_AddGame_Handler,
		},
		{
			MethodName: "AddAccounts",
			Handler:    _DropsCenter_AddAccounts_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _DropsCenter_GetGames_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _DropsCenter_GetAccounts_Handler,
		},
		{
			MethodName: "UpdateGameWorkers",
			Handler:    _DropsCenter_UpdateGameWorkers_Handler,
		},
		{
			MethodName: "UpdateGameChannels",
			Handler:    _DropsCenter_UpdateGameChannels_Handler,
		},
		{
			MethodName: "GetAllGameNames",
			Handler:    _DropsCenter_GetAllGameNames_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _DropsCenter_DeleteAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}
