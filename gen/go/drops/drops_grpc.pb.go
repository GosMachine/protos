// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: drops/drops.proto

package dropsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DropsViewers_StartWatch_FullMethodName = "/drops.DropsViewers/StartWatch"
	DropsViewers_StopWatch_FullMethodName  = "/drops.DropsViewers/StopWatch"
)

// DropsViewersClient is the client API for DropsViewers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsViewersClient interface {
	StartWatch(ctx context.Context, in *StartWatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopWatch(ctx context.Context, in *StopWatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type dropsViewersClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsViewersClient(cc grpc.ClientConnInterface) DropsViewersClient {
	return &dropsViewersClient{cc}
}

func (c *dropsViewersClient) StartWatch(ctx context.Context, in *StartWatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsViewers_StartWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsViewersClient) StopWatch(ctx context.Context, in *StopWatchRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsViewers_StopWatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsViewersServer is the server API for DropsViewers service.
// All implementations must embed UnimplementedDropsViewersServer
// for forward compatibility.
type DropsViewersServer interface {
	StartWatch(context.Context, *StartWatchRequest) (*emptypb.Empty, error)
	StopWatch(context.Context, *StopWatchRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDropsViewersServer()
}

// UnimplementedDropsViewersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropsViewersServer struct{}

func (UnimplementedDropsViewersServer) StartWatch(context.Context, *StartWatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWatch not implemented")
}
func (UnimplementedDropsViewersServer) StopWatch(context.Context, *StopWatchRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopWatch not implemented")
}
func (UnimplementedDropsViewersServer) mustEmbedUnimplementedDropsViewersServer() {}
func (UnimplementedDropsViewersServer) testEmbeddedByValue()                      {}

// UnsafeDropsViewersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsViewersServer will
// result in compilation errors.
type UnsafeDropsViewersServer interface {
	mustEmbedUnimplementedDropsViewersServer()
}

func RegisterDropsViewersServer(s grpc.ServiceRegistrar, srv DropsViewersServer) {
	// If the following call pancis, it indicates UnimplementedDropsViewersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DropsViewers_ServiceDesc, srv)
}

func _DropsViewers_StartWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsViewersServer).StartWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsViewers_StartWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsViewersServer).StartWatch(ctx, req.(*StartWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsViewers_StopWatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopWatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsViewersServer).StopWatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsViewers_StopWatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsViewersServer).StopWatch(ctx, req.(*StopWatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropsViewers_ServiceDesc is the grpc.ServiceDesc for DropsViewers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropsViewers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.DropsViewers",
	HandlerType: (*DropsViewersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWatch",
			Handler:    _DropsViewers_StartWatch_Handler,
		},
		{
			MethodName: "StopWatch",
			Handler:    _DropsViewers_StopWatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}

const (
	Drops_GetActiveGamesInfo_FullMethodName      = "/drops.Drops/GetActiveGamesInfo"
	Drops_UpdateAccountsInfo_FullMethodName      = "/drops.Drops/UpdateAccountsInfo"
	Drops_UpdateFarmList_FullMethodName          = "/drops.Drops/UpdateFarmList"
	Drops_ClearCollectedCampaigns_FullMethodName = "/drops.Drops/ClearCollectedCampaigns"
	Drops_GetCollectedCampaigns_FullMethodName   = "/drops.Drops/GetCollectedCampaigns"
)

// DropsClient is the client API for Drops service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsClient interface {
	GetActiveGamesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveGamesInfoResponse, error)
	UpdateAccountsInfo(ctx context.Context, in *UpdateDropsAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFarmList(ctx context.Context, in *UpdateFarmListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearCollectedCampaigns(ctx context.Context, in *ClearCollectedCampaignsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCollectedCampaigns(ctx context.Context, in *GetCollectedCampaignsRequest, opts ...grpc.CallOption) (*GetCollectedCampaignsResponse, error)
}

type dropsClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsClient(cc grpc.ClientConnInterface) DropsClient {
	return &dropsClient{cc}
}

func (c *dropsClient) GetActiveGamesInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetActiveGamesInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActiveGamesInfoResponse)
	err := c.cc.Invoke(ctx, Drops_GetActiveGamesInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) UpdateAccountsInfo(ctx context.Context, in *UpdateDropsAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Drops_UpdateAccountsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) UpdateFarmList(ctx context.Context, in *UpdateFarmListRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Drops_UpdateFarmList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) ClearCollectedCampaigns(ctx context.Context, in *ClearCollectedCampaignsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Drops_ClearCollectedCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsClient) GetCollectedCampaigns(ctx context.Context, in *GetCollectedCampaignsRequest, opts ...grpc.CallOption) (*GetCollectedCampaignsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCollectedCampaignsResponse)
	err := c.cc.Invoke(ctx, Drops_GetCollectedCampaigns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsServer is the server API for Drops service.
// All implementations must embed UnimplementedDropsServer
// for forward compatibility.
type DropsServer interface {
	GetActiveGamesInfo(context.Context, *emptypb.Empty) (*GetActiveGamesInfoResponse, error)
	UpdateAccountsInfo(context.Context, *UpdateDropsAccountsInfoRequest) (*emptypb.Empty, error)
	UpdateFarmList(context.Context, *UpdateFarmListRequest) (*emptypb.Empty, error)
	ClearCollectedCampaigns(context.Context, *ClearCollectedCampaignsRequest) (*emptypb.Empty, error)
	GetCollectedCampaigns(context.Context, *GetCollectedCampaignsRequest) (*GetCollectedCampaignsResponse, error)
	mustEmbedUnimplementedDropsServer()
}

// UnimplementedDropsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropsServer struct{}

func (UnimplementedDropsServer) GetActiveGamesInfo(context.Context, *emptypb.Empty) (*GetActiveGamesInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveGamesInfo not implemented")
}
func (UnimplementedDropsServer) UpdateAccountsInfo(context.Context, *UpdateDropsAccountsInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountsInfo not implemented")
}
func (UnimplementedDropsServer) UpdateFarmList(context.Context, *UpdateFarmListRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFarmList not implemented")
}
func (UnimplementedDropsServer) ClearCollectedCampaigns(context.Context, *ClearCollectedCampaignsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCollectedCampaigns not implemented")
}
func (UnimplementedDropsServer) GetCollectedCampaigns(context.Context, *GetCollectedCampaignsRequest) (*GetCollectedCampaignsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectedCampaigns not implemented")
}
func (UnimplementedDropsServer) mustEmbedUnimplementedDropsServer() {}
func (UnimplementedDropsServer) testEmbeddedByValue()               {}

// UnsafeDropsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsServer will
// result in compilation errors.
type UnsafeDropsServer interface {
	mustEmbedUnimplementedDropsServer()
}

func RegisterDropsServer(s grpc.ServiceRegistrar, srv DropsServer) {
	// If the following call pancis, it indicates UnimplementedDropsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Drops_ServiceDesc, srv)
}

func _Drops_GetActiveGamesInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).GetActiveGamesInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drops_GetActiveGamesInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).GetActiveGamesInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_UpdateAccountsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDropsAccountsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).UpdateAccountsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drops_UpdateAccountsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).UpdateAccountsInfo(ctx, req.(*UpdateDropsAccountsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_UpdateFarmList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFarmListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).UpdateFarmList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drops_UpdateFarmList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).UpdateFarmList(ctx, req.(*UpdateFarmListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_ClearCollectedCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearCollectedCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).ClearCollectedCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drops_ClearCollectedCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).ClearCollectedCampaigns(ctx, req.(*ClearCollectedCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Drops_GetCollectedCampaigns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectedCampaignsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServer).GetCollectedCampaigns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Drops_GetCollectedCampaigns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServer).GetCollectedCampaigns(ctx, req.(*GetCollectedCampaignsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Drops_ServiceDesc is the grpc.ServiceDesc for Drops service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Drops_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.Drops",
	HandlerType: (*DropsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveGamesInfo",
			Handler:    _Drops_GetActiveGamesInfo_Handler,
		},
		{
			MethodName: "UpdateAccountsInfo",
			Handler:    _Drops_UpdateAccountsInfo_Handler,
		},
		{
			MethodName: "UpdateFarmList",
			Handler:    _Drops_UpdateFarmList_Handler,
		},
		{
			MethodName: "ClearCollectedCampaigns",
			Handler:    _Drops_ClearCollectedCampaigns_Handler,
		},
		{
			MethodName: "GetCollectedCampaigns",
			Handler:    _Drops_GetCollectedCampaigns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}

const (
	DropsCenter_ConnectAccountsWithGame_FullMethodName  = "/drops.DropsCenter/ConnectAccountsWithGame"
	DropsCenter_UpdateFarmList_FullMethodName           = "/drops.DropsCenter/UpdateFarmList"
	DropsCenter_UpdateAccounts_FullMethodName           = "/drops.DropsCenter/UpdateAccounts"
	DropsCenter_AddGame_FullMethodName                  = "/drops.DropsCenter/AddGame"
	DropsCenter_AddAccounts_FullMethodName              = "/drops.DropsCenter/AddAccounts"
	DropsCenter_GetGames_FullMethodName                 = "/drops.DropsCenter/GetGames"
	DropsCenter_GetAccounts_FullMethodName              = "/drops.DropsCenter/GetAccounts"
	DropsCenter_UpdateGameRanges_FullMethodName         = "/drops.DropsCenter/UpdateGameRanges"
	DropsCenter_UpdateGameChannels_FullMethodName       = "/drops.DropsCenter/UpdateGameChannels"
	DropsCenter_UpdateGameFarm_FullMethodName           = "/drops.DropsCenter/UpdateGameFarm"
	DropsCenter_GetAllGameNames_FullMethodName          = "/drops.DropsCenter/GetAllGameNames"
	DropsCenter_DeleteAccount_FullMethodName            = "/drops.DropsCenter/DeleteAccount"
	DropsCenter_MovePreOrderAccount_FullMethodName      = "/drops.DropsCenter/MovePreOrderAccount"
	DropsCenter_SetEndTimeForAccount_FullMethodName     = "/drops.DropsCenter/SetEndTimeForAccount"
	DropsCenter_GetFunPayLots_FullMethodName            = "/drops.DropsCenter/GetFunPayLots"
	DropsCenter_GetFunPayAccounts_FullMethodName        = "/drops.DropsCenter/GetFunPayAccounts"
	DropsCenter_UpdateFunPayLot_FullMethodName          = "/drops.DropsCenter/UpdateFunPayLot"
	DropsCenter_DeleteFunPayLot_FullMethodName          = "/drops.DropsCenter/DeleteFunPayLot"
	DropsCenter_AddFunPayLot_FullMethodName             = "/drops.DropsCenter/AddFunPayLot"
	DropsCenter_DeletePreOrderedAccounts_FullMethodName = "/drops.DropsCenter/DeletePreOrderedAccounts"
	DropsCenter_UpdateAccountsInfo_FullMethodName       = "/drops.DropsCenter/UpdateAccountsInfo"
	DropsCenter_SaveAccountsInfo_FullMethodName         = "/drops.DropsCenter/SaveAccountsInfo"
	DropsCenter_GetTokensForGame_FullMethodName         = "/drops.DropsCenter/GetTokensForGame"
)

// DropsCenterClient is the client API for DropsCenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsCenterClient interface {
	ConnectAccountsWithGame(ctx context.Context, in *ConnectAccountsWithGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateFarmList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAccounts(ctx context.Context, in *UpdateAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error)
	GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error)
	UpdateGameRanges(ctx context.Context, in *UpdateGameRangesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGameChannels(ctx context.Context, in *UpdateGameChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateGameFarm(ctx context.Context, in *UpdateGameFarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAllGameNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGameNamesResponse, error)
	DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MovePreOrderAccount(ctx context.Context, in *MovePreOrderAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetEndTimeForAccount(ctx context.Context, in *SetEndTimeForAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFunPayLots(ctx context.Context, in *GetFunPayLotsRequest, opts ...grpc.CallOption) (*GetFunPayLotsResponse, error)
	GetFunPayAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFunPayAccountsResponse, error)
	UpdateFunPayLot(ctx context.Context, in *UpdateFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteFunPayLot(ctx context.Context, in *DeleteFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AddFunPayLot(ctx context.Context, in *AddFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeletePreOrderedAccounts(ctx context.Context, in *DeletePreOrderedAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateAccountsInfo(ctx context.Context, in *UpdateAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SaveAccountsInfo(ctx context.Context, in *SaveAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTokensForGame(ctx context.Context, in *GetTokensForGameRequest, opts ...grpc.CallOption) (*GetTokensForGameResponse, error)
}

type dropsCenterClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsCenterClient(cc grpc.ClientConnInterface) DropsCenterClient {
	return &dropsCenterClient{cc}
}

func (c *dropsCenterClient) ConnectAccountsWithGame(ctx context.Context, in *ConnectAccountsWithGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_ConnectAccountsWithGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateFarmList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateFarmList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateAccounts(ctx context.Context, in *UpdateAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) AddGame(ctx context.Context, in *AddGameRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_AddGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_AddAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetGames(ctx context.Context, in *GetGamesRequest, opts ...grpc.CallOption) (*GetGamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGamesResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetGames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetAccounts(ctx context.Context, in *GetAccountsRequest, opts ...grpc.CallOption) (*GetAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountsResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateGameRanges(ctx context.Context, in *UpdateGameRangesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateGameRanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateGameChannels(ctx context.Context, in *UpdateGameChannelsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateGameChannels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateGameFarm(ctx context.Context, in *UpdateGameFarmRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateGameFarm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetAllGameNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllGameNamesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllGameNamesResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetAllGameNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) DeleteAccount(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_DeleteAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) MovePreOrderAccount(ctx context.Context, in *MovePreOrderAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_MovePreOrderAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) SetEndTimeForAccount(ctx context.Context, in *SetEndTimeForAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_SetEndTimeForAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetFunPayLots(ctx context.Context, in *GetFunPayLotsRequest, opts ...grpc.CallOption) (*GetFunPayLotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunPayLotsResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetFunPayLots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetFunPayAccounts(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetFunPayAccountsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFunPayAccountsResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetFunPayAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateFunPayLot(ctx context.Context, in *UpdateFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateFunPayLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) DeleteFunPayLot(ctx context.Context, in *DeleteFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_DeleteFunPayLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) AddFunPayLot(ctx context.Context, in *AddFunPayLotRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_AddFunPayLot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) DeletePreOrderedAccounts(ctx context.Context, in *DeletePreOrderedAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_DeletePreOrderedAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) UpdateAccountsInfo(ctx context.Context, in *UpdateAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_UpdateAccountsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) SaveAccountsInfo(ctx context.Context, in *SaveAccountsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, DropsCenter_SaveAccountsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsCenterClient) GetTokensForGame(ctx context.Context, in *GetTokensForGameRequest, opts ...grpc.CallOption) (*GetTokensForGameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokensForGameResponse)
	err := c.cc.Invoke(ctx, DropsCenter_GetTokensForGame_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsCenterServer is the server API for DropsCenter service.
// All implementations must embed UnimplementedDropsCenterServer
// for forward compatibility.
type DropsCenterServer interface {
	ConnectAccountsWithGame(context.Context, *ConnectAccountsWithGameRequest) (*emptypb.Empty, error)
	UpdateFarmList(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	UpdateAccounts(context.Context, *UpdateAccountsRequest) (*emptypb.Empty, error)
	AddGame(context.Context, *AddGameRequest) (*emptypb.Empty, error)
	AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error)
	GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error)
	GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error)
	UpdateGameRanges(context.Context, *UpdateGameRangesRequest) (*emptypb.Empty, error)
	UpdateGameChannels(context.Context, *UpdateGameChannelsRequest) (*emptypb.Empty, error)
	UpdateGameFarm(context.Context, *UpdateGameFarmRequest) (*emptypb.Empty, error)
	GetAllGameNames(context.Context, *emptypb.Empty) (*GetAllGameNamesResponse, error)
	DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error)
	MovePreOrderAccount(context.Context, *MovePreOrderAccountRequest) (*emptypb.Empty, error)
	SetEndTimeForAccount(context.Context, *SetEndTimeForAccountRequest) (*emptypb.Empty, error)
	GetFunPayLots(context.Context, *GetFunPayLotsRequest) (*GetFunPayLotsResponse, error)
	GetFunPayAccounts(context.Context, *emptypb.Empty) (*GetFunPayAccountsResponse, error)
	UpdateFunPayLot(context.Context, *UpdateFunPayLotRequest) (*emptypb.Empty, error)
	DeleteFunPayLot(context.Context, *DeleteFunPayLotRequest) (*emptypb.Empty, error)
	AddFunPayLot(context.Context, *AddFunPayLotRequest) (*emptypb.Empty, error)
	DeletePreOrderedAccounts(context.Context, *DeletePreOrderedAccountsRequest) (*emptypb.Empty, error)
	UpdateAccountsInfo(context.Context, *UpdateAccountsInfoRequest) (*emptypb.Empty, error)
	SaveAccountsInfo(context.Context, *SaveAccountsInfoRequest) (*emptypb.Empty, error)
	GetTokensForGame(context.Context, *GetTokensForGameRequest) (*GetTokensForGameResponse, error)
	mustEmbedUnimplementedDropsCenterServer()
}

// UnimplementedDropsCenterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropsCenterServer struct{}

func (UnimplementedDropsCenterServer) ConnectAccountsWithGame(context.Context, *ConnectAccountsWithGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectAccountsWithGame not implemented")
}
func (UnimplementedDropsCenterServer) UpdateFarmList(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFarmList not implemented")
}
func (UnimplementedDropsCenterServer) UpdateAccounts(context.Context, *UpdateAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccounts not implemented")
}
func (UnimplementedDropsCenterServer) AddGame(context.Context, *AddGameRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGame not implemented")
}
func (UnimplementedDropsCenterServer) AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccounts not implemented")
}
func (UnimplementedDropsCenterServer) GetGames(context.Context, *GetGamesRequest) (*GetGamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedDropsCenterServer) GetAccounts(context.Context, *GetAccountsRequest) (*GetAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccounts not implemented")
}
func (UnimplementedDropsCenterServer) UpdateGameRanges(context.Context, *UpdateGameRangesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameRanges not implemented")
}
func (UnimplementedDropsCenterServer) UpdateGameChannels(context.Context, *UpdateGameChannelsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameChannels not implemented")
}
func (UnimplementedDropsCenterServer) UpdateGameFarm(context.Context, *UpdateGameFarmRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGameFarm not implemented")
}
func (UnimplementedDropsCenterServer) GetAllGameNames(context.Context, *emptypb.Empty) (*GetAllGameNamesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllGameNames not implemented")
}
func (UnimplementedDropsCenterServer) DeleteAccount(context.Context, *DeleteAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedDropsCenterServer) MovePreOrderAccount(context.Context, *MovePreOrderAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MovePreOrderAccount not implemented")
}
func (UnimplementedDropsCenterServer) SetEndTimeForAccount(context.Context, *SetEndTimeForAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEndTimeForAccount not implemented")
}
func (UnimplementedDropsCenterServer) GetFunPayLots(context.Context, *GetFunPayLotsRequest) (*GetFunPayLotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunPayLots not implemented")
}
func (UnimplementedDropsCenterServer) GetFunPayAccounts(context.Context, *emptypb.Empty) (*GetFunPayAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFunPayAccounts not implemented")
}
func (UnimplementedDropsCenterServer) UpdateFunPayLot(context.Context, *UpdateFunPayLotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFunPayLot not implemented")
}
func (UnimplementedDropsCenterServer) DeleteFunPayLot(context.Context, *DeleteFunPayLotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFunPayLot not implemented")
}
func (UnimplementedDropsCenterServer) AddFunPayLot(context.Context, *AddFunPayLotRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFunPayLot not implemented")
}
func (UnimplementedDropsCenterServer) DeletePreOrderedAccounts(context.Context, *DeletePreOrderedAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePreOrderedAccounts not implemented")
}
func (UnimplementedDropsCenterServer) UpdateAccountsInfo(context.Context, *UpdateAccountsInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountsInfo not implemented")
}
func (UnimplementedDropsCenterServer) SaveAccountsInfo(context.Context, *SaveAccountsInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAccountsInfo not implemented")
}
func (UnimplementedDropsCenterServer) GetTokensForGame(context.Context, *GetTokensForGameRequest) (*GetTokensForGameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokensForGame not implemented")
}
func (UnimplementedDropsCenterServer) mustEmbedUnimplementedDropsCenterServer() {}
func (UnimplementedDropsCenterServer) testEmbeddedByValue()                     {}

// UnsafeDropsCenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsCenterServer will
// result in compilation errors.
type UnsafeDropsCenterServer interface {
	mustEmbedUnimplementedDropsCenterServer()
}

func RegisterDropsCenterServer(s grpc.ServiceRegistrar, srv DropsCenterServer) {
	// If the following call pancis, it indicates UnimplementedDropsCenterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DropsCenter_ServiceDesc, srv)
}

func _DropsCenter_ConnectAccountsWithGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectAccountsWithGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).ConnectAccountsWithGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_ConnectAccountsWithGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).ConnectAccountsWithGame(ctx, req.(*ConnectAccountsWithGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateFarmList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateFarmList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateFarmList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateFarmList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateAccounts(ctx, req.(*UpdateAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_AddGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).AddGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_AddGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).AddGame(ctx, req.(*AddGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_AddAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).AddAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_AddAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).AddAccounts(ctx, req.(*AddAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGamesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetGames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetGames(ctx, req.(*GetGamesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetAccounts(ctx, req.(*GetAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateGameRanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameRangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateGameRanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateGameRanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateGameRanges(ctx, req.(*UpdateGameRangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateGameChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateGameChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateGameChannels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateGameChannels(ctx, req.(*UpdateGameChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateGameFarm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGameFarmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateGameFarm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateGameFarm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateGameFarm(ctx, req.(*UpdateGameFarmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetAllGameNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetAllGameNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetAllGameNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetAllGameNames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_DeleteAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).DeleteAccount(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_MovePreOrderAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovePreOrderAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).MovePreOrderAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_MovePreOrderAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).MovePreOrderAccount(ctx, req.(*MovePreOrderAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_SetEndTimeForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEndTimeForAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).SetEndTimeForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_SetEndTimeForAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).SetEndTimeForAccount(ctx, req.(*SetEndTimeForAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetFunPayLots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFunPayLotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetFunPayLots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetFunPayLots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetFunPayLots(ctx, req.(*GetFunPayLotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetFunPayAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetFunPayAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetFunPayAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetFunPayAccounts(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateFunPayLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFunPayLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateFunPayLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateFunPayLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateFunPayLot(ctx, req.(*UpdateFunPayLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_DeleteFunPayLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFunPayLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).DeleteFunPayLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_DeleteFunPayLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).DeleteFunPayLot(ctx, req.(*DeleteFunPayLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_AddFunPayLot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFunPayLotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).AddFunPayLot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_AddFunPayLot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).AddFunPayLot(ctx, req.(*AddFunPayLotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_DeletePreOrderedAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePreOrderedAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).DeletePreOrderedAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_DeletePreOrderedAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).DeletePreOrderedAccounts(ctx, req.(*DeletePreOrderedAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_UpdateAccountsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).UpdateAccountsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_UpdateAccountsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).UpdateAccountsInfo(ctx, req.(*UpdateAccountsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_SaveAccountsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAccountsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).SaveAccountsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_SaveAccountsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).SaveAccountsInfo(ctx, req.(*SaveAccountsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsCenter_GetTokensForGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensForGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsCenterServer).GetTokensForGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsCenter_GetTokensForGame_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsCenterServer).GetTokensForGame(ctx, req.(*GetTokensForGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropsCenter_ServiceDesc is the grpc.ServiceDesc for DropsCenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropsCenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.DropsCenter",
	HandlerType: (*DropsCenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectAccountsWithGame",
			Handler:    _DropsCenter_ConnectAccountsWithGame_Handler,
		},
		{
			MethodName: "UpdateFarmList",
			Handler:    _DropsCenter_UpdateFarmList_Handler,
		},
		{
			MethodName: "UpdateAccounts",
			Handler:    _DropsCenter_UpdateAccounts_Handler,
		},
		{
			MethodName: "AddGame",
			Handler:    _DropsCenter_AddGame_Handler,
		},
		{
			MethodName: "AddAccounts",
			Handler:    _DropsCenter_AddAccounts_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _DropsCenter_GetGames_Handler,
		},
		{
			MethodName: "GetAccounts",
			Handler:    _DropsCenter_GetAccounts_Handler,
		},
		{
			MethodName: "UpdateGameRanges",
			Handler:    _DropsCenter_UpdateGameRanges_Handler,
		},
		{
			MethodName: "UpdateGameChannels",
			Handler:    _DropsCenter_UpdateGameChannels_Handler,
		},
		{
			MethodName: "UpdateGameFarm",
			Handler:    _DropsCenter_UpdateGameFarm_Handler,
		},
		{
			MethodName: "GetAllGameNames",
			Handler:    _DropsCenter_GetAllGameNames_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _DropsCenter_DeleteAccount_Handler,
		},
		{
			MethodName: "MovePreOrderAccount",
			Handler:    _DropsCenter_MovePreOrderAccount_Handler,
		},
		{
			MethodName: "SetEndTimeForAccount",
			Handler:    _DropsCenter_SetEndTimeForAccount_Handler,
		},
		{
			MethodName: "GetFunPayLots",
			Handler:    _DropsCenter_GetFunPayLots_Handler,
		},
		{
			MethodName: "GetFunPayAccounts",
			Handler:    _DropsCenter_GetFunPayAccounts_Handler,
		},
		{
			MethodName: "UpdateFunPayLot",
			Handler:    _DropsCenter_UpdateFunPayLot_Handler,
		},
		{
			MethodName: "DeleteFunPayLot",
			Handler:    _DropsCenter_DeleteFunPayLot_Handler,
		},
		{
			MethodName: "AddFunPayLot",
			Handler:    _DropsCenter_AddFunPayLot_Handler,
		},
		{
			MethodName: "DeletePreOrderedAccounts",
			Handler:    _DropsCenter_DeletePreOrderedAccounts_Handler,
		},
		{
			MethodName: "UpdateAccountsInfo",
			Handler:    _DropsCenter_UpdateAccountsInfo_Handler,
		},
		{
			MethodName: "SaveAccountsInfo",
			Handler:    _DropsCenter_SaveAccountsInfo_Handler,
		},
		{
			MethodName: "GetTokensForGame",
			Handler:    _DropsCenter_GetTokensForGame_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}
