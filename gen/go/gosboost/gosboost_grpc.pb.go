// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: gosboost/gosboost.proto

package gosboostv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GosBoostDB_AddAccounts_FullMethodName                       = "/gosboost.GosBoostDB/AddAccounts"
	GosBoostDB_GetTokensForFollow_FullMethodName                = "/gosboost.GosBoostDB/GetTokensForFollow"
	GosBoostDB_GetChatTokens_FullMethodName                     = "/gosboost.GosBoostDB/GetChatTokens"
	GosBoostDB_UpdateFollowSuccessAndErrorTokens_FullMethodName = "/gosboost.GosBoostDB/UpdateFollowSuccessAndErrorTokens"
	GosBoostDB_GetOperation_FullMethodName                      = "/gosboost.GosBoostDB/GetOperation"
	GosBoostDB_GetOperationsByStatuses_FullMethodName           = "/gosboost.GosBoostDB/GetOperationsByStatuses"
	GosBoostDB_GetOperations_FullMethodName                     = "/gosboost.GosBoostDB/GetOperations"
	GosBoostDB_CreateOperation_FullMethodName                   = "/gosboost.GosBoostDB/CreateOperation"
	GosBoostDB_StartOperation_FullMethodName                    = "/gosboost.GosBoostDB/StartOperation"
	GosBoostDB_CompleteOperation_FullMethodName                 = "/gosboost.GosBoostDB/CompleteOperation"
	GosBoostDB_FailOperation_FullMethodName                     = "/gosboost.GosBoostDB/FailOperation"
	GosBoostDB_InQueueOperation_FullMethodName                  = "/gosboost.GosBoostDB/InQueueOperation"
	GosBoostDB_GetCompletePercentage_FullMethodName             = "/gosboost.GosBoostDB/GetCompletePercentage"
	GosBoostDB_AppendOperationCompleted_FullMethodName          = "/gosboost.GosBoostDB/AppendOperationCompleted"
)

// GosBoostDBClient is the client API for GosBoostDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GosBoostDBClient interface {
	AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTokensForFollow(ctx context.Context, in *GetTokensForFollowRequest, opts ...grpc.CallOption) (*GetTokensForFollowResponse, error)
	GetChatTokens(ctx context.Context, in *GetChatTokensRequest, opts ...grpc.CallOption) (*GetChatTokensResponse, error)
	UpdateFollowSuccessAndErrorTokens(ctx context.Context, in *UpdateFollowSuccessAndErrorTokensRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*OperationInfo, error)
	GetOperationsByStatuses(ctx context.Context, in *GetOperationsByStatusesRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	CreateOperation(ctx context.Context, in *OperationInfo, opts ...grpc.CallOption) (*Operation, error)
	StartOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CompleteOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FailOperation(ctx context.Context, in *FailOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	InQueueOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCompletePercentage(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*GetCompletePercentageResponse, error)
	AppendOperationCompleted(ctx context.Context, in *AppendOperationCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gosBoostDBClient struct {
	cc grpc.ClientConnInterface
}

func NewGosBoostDBClient(cc grpc.ClientConnInterface) GosBoostDBClient {
	return &gosBoostDBClient{cc}
}

func (c *gosBoostDBClient) AddAccounts(ctx context.Context, in *AddAccountsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_AddAccounts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetTokensForFollow(ctx context.Context, in *GetTokensForFollowRequest, opts ...grpc.CallOption) (*GetTokensForFollowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokensForFollowResponse)
	err := c.cc.Invoke(ctx, GosBoostDB_GetTokensForFollow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetChatTokens(ctx context.Context, in *GetChatTokensRequest, opts ...grpc.CallOption) (*GetChatTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatTokensResponse)
	err := c.cc.Invoke(ctx, GosBoostDB_GetChatTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) UpdateFollowSuccessAndErrorTokens(ctx context.Context, in *UpdateFollowSuccessAndErrorTokensRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_UpdateFollowSuccessAndErrorTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*OperationInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationInfo)
	err := c.cc.Invoke(ctx, GosBoostDB_GetOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetOperationsByStatuses(ctx context.Context, in *GetOperationsByStatusesRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, GosBoostDB_GetOperationsByStatuses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, GosBoostDB_GetOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) CreateOperation(ctx context.Context, in *OperationInfo, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoostDB_CreateOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) StartOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_StartOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) CompleteOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_CompleteOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) FailOperation(ctx context.Context, in *FailOperationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_FailOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) InQueueOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_InQueueOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) GetCompletePercentage(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*GetCompletePercentageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCompletePercentageResponse)
	err := c.cc.Invoke(ctx, GosBoostDB_GetCompletePercentage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostDBClient) AppendOperationCompleted(ctx context.Context, in *AppendOperationCompletedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoostDB_AppendOperationCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GosBoostDBServer is the server API for GosBoostDB service.
// All implementations must embed UnimplementedGosBoostDBServer
// for forward compatibility.
type GosBoostDBServer interface {
	AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error)
	GetTokensForFollow(context.Context, *GetTokensForFollowRequest) (*GetTokensForFollowResponse, error)
	GetChatTokens(context.Context, *GetChatTokensRequest) (*GetChatTokensResponse, error)
	UpdateFollowSuccessAndErrorTokens(context.Context, *UpdateFollowSuccessAndErrorTokensRequest) (*emptypb.Empty, error)
	GetOperation(context.Context, *Operation) (*OperationInfo, error)
	GetOperationsByStatuses(context.Context, *GetOperationsByStatusesRequest) (*GetOperationsResponse, error)
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	CreateOperation(context.Context, *OperationInfo) (*Operation, error)
	StartOperation(context.Context, *Operation) (*emptypb.Empty, error)
	CompleteOperation(context.Context, *Operation) (*emptypb.Empty, error)
	FailOperation(context.Context, *FailOperationRequest) (*emptypb.Empty, error)
	InQueueOperation(context.Context, *Operation) (*emptypb.Empty, error)
	GetCompletePercentage(context.Context, *Operation) (*GetCompletePercentageResponse, error)
	AppendOperationCompleted(context.Context, *AppendOperationCompletedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGosBoostDBServer()
}

// UnimplementedGosBoostDBServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGosBoostDBServer struct{}

func (UnimplementedGosBoostDBServer) AddAccounts(context.Context, *AddAccountsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccounts not implemented")
}
func (UnimplementedGosBoostDBServer) GetTokensForFollow(context.Context, *GetTokensForFollowRequest) (*GetTokensForFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokensForFollow not implemented")
}
func (UnimplementedGosBoostDBServer) GetChatTokens(context.Context, *GetChatTokensRequest) (*GetChatTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatTokens not implemented")
}
func (UnimplementedGosBoostDBServer) UpdateFollowSuccessAndErrorTokens(context.Context, *UpdateFollowSuccessAndErrorTokensRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFollowSuccessAndErrorTokens not implemented")
}
func (UnimplementedGosBoostDBServer) GetOperation(context.Context, *Operation) (*OperationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedGosBoostDBServer) GetOperationsByStatuses(context.Context, *GetOperationsByStatusesRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationsByStatuses not implemented")
}
func (UnimplementedGosBoostDBServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedGosBoostDBServer) CreateOperation(context.Context, *OperationInfo) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperation not implemented")
}
func (UnimplementedGosBoostDBServer) StartOperation(context.Context, *Operation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartOperation not implemented")
}
func (UnimplementedGosBoostDBServer) CompleteOperation(context.Context, *Operation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteOperation not implemented")
}
func (UnimplementedGosBoostDBServer) FailOperation(context.Context, *FailOperationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailOperation not implemented")
}
func (UnimplementedGosBoostDBServer) InQueueOperation(context.Context, *Operation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InQueueOperation not implemented")
}
func (UnimplementedGosBoostDBServer) GetCompletePercentage(context.Context, *Operation) (*GetCompletePercentageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompletePercentage not implemented")
}
func (UnimplementedGosBoostDBServer) AppendOperationCompleted(context.Context, *AppendOperationCompletedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendOperationCompleted not implemented")
}
func (UnimplementedGosBoostDBServer) mustEmbedUnimplementedGosBoostDBServer() {}
func (UnimplementedGosBoostDBServer) testEmbeddedByValue()                    {}

// UnsafeGosBoostDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GosBoostDBServer will
// result in compilation errors.
type UnsafeGosBoostDBServer interface {
	mustEmbedUnimplementedGosBoostDBServer()
}

func RegisterGosBoostDBServer(s grpc.ServiceRegistrar, srv GosBoostDBServer) {
	// If the following call pancis, it indicates UnimplementedGosBoostDBServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GosBoostDB_ServiceDesc, srv)
}

func _GosBoostDB_AddAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).AddAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_AddAccounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).AddAccounts(ctx, req.(*AddAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetTokensForFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokensForFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetTokensForFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetTokensForFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetTokensForFollow(ctx, req.(*GetTokensForFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetChatTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetChatTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetChatTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetChatTokens(ctx, req.(*GetChatTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_UpdateFollowSuccessAndErrorTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFollowSuccessAndErrorTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).UpdateFollowSuccessAndErrorTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_UpdateFollowSuccessAndErrorTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).UpdateFollowSuccessAndErrorTokens(ctx, req.(*UpdateFollowSuccessAndErrorTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetOperationsByStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsByStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetOperationsByStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetOperationsByStatuses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetOperationsByStatuses(ctx, req.(*GetOperationsByStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_CreateOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperationInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).CreateOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_CreateOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).CreateOperation(ctx, req.(*OperationInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_StartOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).StartOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_StartOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).StartOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_CompleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).CompleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_CompleteOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).CompleteOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_FailOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FailOperationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).FailOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_FailOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).FailOperation(ctx, req.(*FailOperationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_InQueueOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).InQueueOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_InQueueOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).InQueueOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_GetCompletePercentage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).GetCompletePercentage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_GetCompletePercentage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).GetCompletePercentage(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoostDB_AppendOperationCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendOperationCompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostDBServer).AppendOperationCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoostDB_AppendOperationCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostDBServer).AppendOperationCompleted(ctx, req.(*AppendOperationCompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GosBoostDB_ServiceDesc is the grpc.ServiceDesc for GosBoostDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GosBoostDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gosboost.GosBoostDB",
	HandlerType: (*GosBoostDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddAccounts",
			Handler:    _GosBoostDB_AddAccounts_Handler,
		},
		{
			MethodName: "GetTokensForFollow",
			Handler:    _GosBoostDB_GetTokensForFollow_Handler,
		},
		{
			MethodName: "GetChatTokens",
			Handler:    _GosBoostDB_GetChatTokens_Handler,
		},
		{
			MethodName: "UpdateFollowSuccessAndErrorTokens",
			Handler:    _GosBoostDB_UpdateFollowSuccessAndErrorTokens_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _GosBoostDB_GetOperation_Handler,
		},
		{
			MethodName: "GetOperationsByStatuses",
			Handler:    _GosBoostDB_GetOperationsByStatuses_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _GosBoostDB_GetOperations_Handler,
		},
		{
			MethodName: "CreateOperation",
			Handler:    _GosBoostDB_CreateOperation_Handler,
		},
		{
			MethodName: "StartOperation",
			Handler:    _GosBoostDB_StartOperation_Handler,
		},
		{
			MethodName: "CompleteOperation",
			Handler:    _GosBoostDB_CompleteOperation_Handler,
		},
		{
			MethodName: "FailOperation",
			Handler:    _GosBoostDB_FailOperation_Handler,
		},
		{
			MethodName: "InQueueOperation",
			Handler:    _GosBoostDB_InQueueOperation_Handler,
		},
		{
			MethodName: "GetCompletePercentage",
			Handler:    _GosBoostDB_GetCompletePercentage_Handler,
		},
		{
			MethodName: "AppendOperationCompleted",
			Handler:    _GosBoostDB_AppendOperationCompleted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gosboost/gosboost.proto",
}

const (
	GosBoost_TwitchFollowChannel_FullMethodName = "/gosboost.GosBoost/TwitchFollowChannel"
	GosBoost_TwitchClipViewers_FullMethodName   = "/gosboost.GosBoost/TwitchClipViewers"
	GosBoost_TwitchVODViewers_FullMethodName    = "/gosboost.GosBoost/TwitchVODViewers"
	GosBoost_TwitchLiveViewers_FullMethodName   = "/gosboost.GosBoost/TwitchLiveViewers"
	GosBoost_TwitchChatters_FullMethodName      = "/gosboost.GosBoost/TwitchChatters"
	GosBoost_TwitchFakeRaid_FullMethodName      = "/gosboost.GosBoost/TwitchFakeRaid"
	GosBoost_IsUsernameValid_FullMethodName     = "/gosboost.GosBoost/IsUsernameValid"
	GosBoost_CancelOperation_FullMethodName     = "/gosboost.GosBoost/CancelOperation"
)

// GosBoostClient is the client API for GosBoost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GosBoostClient interface {
	TwitchFollowChannel(ctx context.Context, in *TwitchFollowChannelRequest, opts ...grpc.CallOption) (*Operation, error)
	TwitchClipViewers(ctx context.Context, in *TwitchClipViewersRequest, opts ...grpc.CallOption) (*Operation, error)
	TwitchVODViewers(ctx context.Context, in *TwitchVODViewersRequest, opts ...grpc.CallOption) (*Operation, error)
	TwitchLiveViewers(ctx context.Context, in *TwitchLiveViewersRequest, opts ...grpc.CallOption) (*Operation, error)
	TwitchChatters(ctx context.Context, in *TwitchChattersRequest, opts ...grpc.CallOption) (*Operation, error)
	TwitchFakeRaid(ctx context.Context, in *TwitchFakeRaidRequest, opts ...grpc.CallOption) (*Operation, error)
	IsUsernameValid(ctx context.Context, in *IsUsernameValidRequest, opts ...grpc.CallOption) (*IsUsernameValidResponse, error)
	CancelOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gosBoostClient struct {
	cc grpc.ClientConnInterface
}

func NewGosBoostClient(cc grpc.ClientConnInterface) GosBoostClient {
	return &gosBoostClient{cc}
}

func (c *gosBoostClient) TwitchFollowChannel(ctx context.Context, in *TwitchFollowChannelRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchFollowChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) TwitchClipViewers(ctx context.Context, in *TwitchClipViewersRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchClipViewers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) TwitchVODViewers(ctx context.Context, in *TwitchVODViewersRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchVODViewers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) TwitchLiveViewers(ctx context.Context, in *TwitchLiveViewersRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchLiveViewers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) TwitchChatters(ctx context.Context, in *TwitchChattersRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchChatters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) TwitchFakeRaid(ctx context.Context, in *TwitchFakeRaidRequest, opts ...grpc.CallOption) (*Operation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Operation)
	err := c.cc.Invoke(ctx, GosBoost_TwitchFakeRaid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) IsUsernameValid(ctx context.Context, in *IsUsernameValidRequest, opts ...grpc.CallOption) (*IsUsernameValidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IsUsernameValidResponse)
	err := c.cc.Invoke(ctx, GosBoost_IsUsernameValid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gosBoostClient) CancelOperation(ctx context.Context, in *Operation, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GosBoost_CancelOperation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GosBoostServer is the server API for GosBoost service.
// All implementations must embed UnimplementedGosBoostServer
// for forward compatibility.
type GosBoostServer interface {
	TwitchFollowChannel(context.Context, *TwitchFollowChannelRequest) (*Operation, error)
	TwitchClipViewers(context.Context, *TwitchClipViewersRequest) (*Operation, error)
	TwitchVODViewers(context.Context, *TwitchVODViewersRequest) (*Operation, error)
	TwitchLiveViewers(context.Context, *TwitchLiveViewersRequest) (*Operation, error)
	TwitchChatters(context.Context, *TwitchChattersRequest) (*Operation, error)
	TwitchFakeRaid(context.Context, *TwitchFakeRaidRequest) (*Operation, error)
	IsUsernameValid(context.Context, *IsUsernameValidRequest) (*IsUsernameValidResponse, error)
	CancelOperation(context.Context, *Operation) (*emptypb.Empty, error)
	mustEmbedUnimplementedGosBoostServer()
}

// UnimplementedGosBoostServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGosBoostServer struct{}

func (UnimplementedGosBoostServer) TwitchFollowChannel(context.Context, *TwitchFollowChannelRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchFollowChannel not implemented")
}
func (UnimplementedGosBoostServer) TwitchClipViewers(context.Context, *TwitchClipViewersRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchClipViewers not implemented")
}
func (UnimplementedGosBoostServer) TwitchVODViewers(context.Context, *TwitchVODViewersRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchVODViewers not implemented")
}
func (UnimplementedGosBoostServer) TwitchLiveViewers(context.Context, *TwitchLiveViewersRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchLiveViewers not implemented")
}
func (UnimplementedGosBoostServer) TwitchChatters(context.Context, *TwitchChattersRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchChatters not implemented")
}
func (UnimplementedGosBoostServer) TwitchFakeRaid(context.Context, *TwitchFakeRaidRequest) (*Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitchFakeRaid not implemented")
}
func (UnimplementedGosBoostServer) IsUsernameValid(context.Context, *IsUsernameValidRequest) (*IsUsernameValidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsUsernameValid not implemented")
}
func (UnimplementedGosBoostServer) CancelOperation(context.Context, *Operation) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOperation not implemented")
}
func (UnimplementedGosBoostServer) mustEmbedUnimplementedGosBoostServer() {}
func (UnimplementedGosBoostServer) testEmbeddedByValue()                  {}

// UnsafeGosBoostServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GosBoostServer will
// result in compilation errors.
type UnsafeGosBoostServer interface {
	mustEmbedUnimplementedGosBoostServer()
}

func RegisterGosBoostServer(s grpc.ServiceRegistrar, srv GosBoostServer) {
	// If the following call pancis, it indicates UnimplementedGosBoostServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GosBoost_ServiceDesc, srv)
}

func _GosBoost_TwitchFollowChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchFollowChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchFollowChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchFollowChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchFollowChannel(ctx, req.(*TwitchFollowChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_TwitchClipViewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchClipViewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchClipViewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchClipViewers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchClipViewers(ctx, req.(*TwitchClipViewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_TwitchVODViewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchVODViewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchVODViewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchVODViewers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchVODViewers(ctx, req.(*TwitchVODViewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_TwitchLiveViewers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchLiveViewersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchLiveViewers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchLiveViewers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchLiveViewers(ctx, req.(*TwitchLiveViewersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_TwitchChatters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchChattersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchChatters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchChatters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchChatters(ctx, req.(*TwitchChattersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_TwitchFakeRaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitchFakeRaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).TwitchFakeRaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_TwitchFakeRaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).TwitchFakeRaid(ctx, req.(*TwitchFakeRaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_IsUsernameValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsUsernameValidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).IsUsernameValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_IsUsernameValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).IsUsernameValid(ctx, req.(*IsUsernameValidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GosBoost_CancelOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GosBoostServer).CancelOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GosBoost_CancelOperation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GosBoostServer).CancelOperation(ctx, req.(*Operation))
	}
	return interceptor(ctx, in, info, handler)
}

// GosBoost_ServiceDesc is the grpc.ServiceDesc for GosBoost service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GosBoost_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gosboost.GosBoost",
	HandlerType: (*GosBoostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TwitchFollowChannel",
			Handler:    _GosBoost_TwitchFollowChannel_Handler,
		},
		{
			MethodName: "TwitchClipViewers",
			Handler:    _GosBoost_TwitchClipViewers_Handler,
		},
		{
			MethodName: "TwitchVODViewers",
			Handler:    _GosBoost_TwitchVODViewers_Handler,
		},
		{
			MethodName: "TwitchLiveViewers",
			Handler:    _GosBoost_TwitchLiveViewers_Handler,
		},
		{
			MethodName: "TwitchChatters",
			Handler:    _GosBoost_TwitchChatters_Handler,
		},
		{
			MethodName: "TwitchFakeRaid",
			Handler:    _GosBoost_TwitchFakeRaid_Handler,
		},
		{
			MethodName: "IsUsernameValid",
			Handler:    _GosBoost_IsUsernameValid_Handler,
		},
		{
			MethodName: "CancelOperation",
			Handler:    _GosBoost_CancelOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gosboost/gosboost.proto",
}
