syntax = "proto3";

package drops;

import "google/protobuf/empty.proto";

option go_package = "gosmach1ne.drops.v1;dropsv1";

service Drops {
  rpc GetActiveGamesInfo(google.protobuf.Empty)
      returns (GetActiveGamesInfoResponse);
  rpc UpdateAccountsInfo(UpdateDropsAccountsInfoRequest)
      returns (google.protobuf.Empty);
  rpc UpdateFarmList(UpdateFarmListRequest) returns (google.protobuf.Empty);
}

service DropsCenter {
  rpc RunGame(GameCenterRequest) returns (google.protobuf.Empty);
  rpc StopGame(GameCenterRequest) returns (google.protobuf.Empty);
  rpc UpdateAccounts(UpdateAccountsRequest) returns (google.protobuf.Empty);
  rpc AddGame(AddGameRequest) returns (google.protobuf.Empty);
  rpc AddAccounts(AddAccountsRequest) returns (google.protobuf.Empty);
  rpc GetGames(GetGamesRequest) returns (GetGamesResponse);
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse);
  rpc UpdateGameRanges(UpdateGameRangesRequest) returns (google.protobuf.Empty);
  rpc UpdateGameChannels(UpdateGameChannelsRequest)
      returns (google.protobuf.Empty);
  rpc UpdateGameAutoFarm(UpdateGameAutoFarmRequest)
      returns (google.protobuf.Empty);
  rpc GetAllGameNames(google.protobuf.Empty) returns (GetAllGameNamesResponse);
  rpc DeleteAccount(DeleteAccountRequest) returns (google.protobuf.Empty);
  rpc MovePreOrderAccount(MovePreOrderAccountRequest)
      returns (google.protobuf.Empty);
  rpc GetFunPayLots(GetFunPayLotsRequest) returns (GetFunPayLotsResponse);
  rpc UpdateFunPayLot(UpdateFunPayLotRequest) returns (google.protobuf.Empty);
  rpc DeleteFunPayLot(DeleteFunPayLotRequest) returns (google.protobuf.Empty);
  rpc AddFunPayLot(AddFunPayLotRequest) returns (google.protobuf.Empty);
  rpc DeletePreOrderedAccounts(DeletePreOrderedAccountsRequest)
      returns (google.protobuf.Empty);
  rpc UpdateAccountsInfo(UpdateAccountsInfoRequest)
      returns (google.protobuf.Empty);
  rpc SaveAccountsInfo(SaveAccountsInfoRequest) returns (google.protobuf.Empty);
  rpc GetTokensForGame(GetTokensForGameRequest) returns (GetTokensForGameResponse);
}

message UpdateFarmListRequest {
  repeated FarmListGame games = 1;
}

message FarmListGame {
  string slug = 1;
  string name = 2;
  repeated string channels = 3;
  bool watchChannelsAfterDropsClaiming = 4;
  repeated string tokens = 5;
  string ranges = 6;
  bool farm = 7;
}

message AccountWithDrops {
  int64 dbId = 1;
  map<string, int64> drops = 2;
}

message SaveAccountsInfoRequest { repeated AccountWithDrops accounts = 1; }

message UpdateAccountsInfoRequest { string game = 1; }

message UpdateDropsAccountsInfoRequest { repeated Token accounts = 1; }

message AddFunPayLotRequest {
  string name = 1;
  string lotType = 2;
}

message DeletePreOrderedAccountsRequest { string game = 1; }

message GameCenterRequest { string name = 1; }

message GetFunPayLotsRequest {
  string search = 1;
  string lotsType = 2;
  int64 limit = 3;
  int64 page = 4;
}

message GetFunPayLotsResponse {
  repeated string lots = 1;
  int64 quantity = 2;
}

message DeleteAccountRequest {
  string username = 1;
  bool dontDeletePreOrdered = 2;
}

message MovePreOrderAccountRequest { string username = 1; }

message GetAllGameNamesResponse { repeated string games = 1; }

message UpdateGameRangesRequest {
  string game = 1;
  string ranges = 2;
}

message UpdateGameChannelsRequest {
  string game = 1;
  repeated string channels = 2;
}

message UpdateFunPayLotRequest {
  string oldName = 1;
  string newName = 2;
}

message DeleteFunPayLotRequest { string name = 1; }

message UpdateGameAutoFarmRequest {
  string game = 1;
  bool autoFarm = 2;
}

message GetGamesRequest {
  int64 page = 1;
  int64 limit = 2;
}

message GetGamesResponse {
  repeated Game games = 1;
  int64 totalGameCount = 2;
}

message Game {
  string name = 1;
  string slug = 2;
  string ranges = 3;
  repeated string channels = 4;
  bool farm = 5;
}

message GetAccountsRequest {
  int64 page = 1;
  string game = 2;
  int64 limit = 3;
  string search = 4;
  bool onlyPreOrdered = 5;
}

message GetAccountsResponse {
  repeated AccountWithData accounts = 1;
  int64 totalGameCount = 2;
}

message UpdateAccountsRequest {
  repeated string tokens = 1;
  repeated string drops = 2;
}

message AddGameRequest {
  string game = 1;
  string slug = 2;
}

message Token {
  string username = 1;
  string password = 2;
  string oauth = 3;
  int64 dbId = 4;
}

message GetTokensForGameRequest {
  string slug = 1;
}

message GetTokensForGameResponse {
  repeated string tokens = 1;
}

message AccountWithData {
  Token token = 1;
  repeated string drops = 2;
  string game = 3;
  int64 id = 4;
  bool isPreOrdered = 5;
}

message AddAccountsRequest {
  repeated Token accounts = 1;
  string game = 2;
}

message GetActiveGamesInfoResponse { repeated GameInfo games = 1; }

message GameInfo {
  int64 activeWorkers = 1;
  string currentChannel = 2;
  int64 leftToWatch = 3;
  int64 successCount = 4;
  string name = 5;
  string slug = 6;
}