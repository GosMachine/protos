syntax = "proto3";

package drops;

import "google/protobuf/empty.proto";

option go_package = "gosmach1ne.drops.v1;dropsv1";

service Drops {
  rpc RunGame(RunGameRequest) returns (google.protobuf.Empty);
  rpc RunChannels(RunChannelsRequest) returns (google.protobuf.Empty);
  rpc Stop(StopRequest) returns (google.protobuf.Empty);
  rpc GetActiveGamesInfo(google.protobuf.Empty)
      returns (GetActiveGamesInfoResponse);
}

service DropsCenter {
  rpc RunGame(GameCenterRequest) returns (google.protobuf.Empty);
  rpc StopGame(GameCenterRequest) returns (google.protobuf.Empty);
  rpc UpdateAccounts(UpdateAccountsRequest) returns (google.protobuf.Empty);
  rpc AddGame(AddGameRequest) returns (google.protobuf.Empty);
  rpc AddAccounts(AddAccountsRequest) returns (google.protobuf.Empty);
  rpc GetGames(GetGamesRequest) returns (GetGamesResponse);
  rpc GetAccounts(GetAccountsRequest) returns (GetAccountsResponse);
  rpc UpdateGameWorkers(UpdateGameWorkersRequest)
      returns (google.protobuf.Empty);
  rpc UpdateGameChannels(UpdateGameChannelsRequest)
      returns (google.protobuf.Empty);
  rpc UpdateGameAutoFarm(UpdateGameAutoFarmRequest)
      returns (google.protobuf.Empty);
  rpc GetAllGameNames(google.protobuf.Empty) returns (GetAllGameNamesResponse);
  rpc DeleteAccount(DeleteAccountRequest) returns (google.protobuf.Empty);
  rpc MovePreOrderAccount(MovePreOrderAccountRequest) returns (google.protobuf.Empty);
  rpc GetFunPayLots(google.protobuf.Empty) returns (GetFunPayLotsResponse);
  rpc GetPreOrderLots(google.protobuf.Empty) returns (GetFunPayLotsResponse);
  rpc UpdateFunPayLots(UpdateFunPayLotsRequest) returns (google.protobuf.Empty);
}

message GameCenterRequest { string name = 1; }

message GetFunPayLotsResponse { repeated string lots = 1; }

message DeleteAccountRequest { string username = 1; }

message MovePreOrderAccountRequest { string username = 1; }

message GetAllGameNamesResponse { repeated string games = 1; }

message UpdateGameWorkersRequest {
  string game = 1;
  int64 workers = 2;
}

message UpdateGameChannelsRequest {
  string game = 1;
  repeated string channels = 2;
}

message UpdateFunPayLotsRequest { repeated string lots = 1; }

message UpdateGameAutoFarmRequest {
  string game = 1;
  bool autoFarm = 2;
}

message GetGamesRequest {
  int64 page = 1;
  int64 limit = 2;
}

message GetGamesResponse {
  repeated Game games = 1;
  int64 totalGameCount = 2;
}

message GetAccountsRequest {
  int64 page = 1;
  string game = 2;
  int64 limit = 3;
  string search = 4;
}

message GetAccountsResponse {
  repeated AccountWithData accounts = 1;
  int64 totalGameCount = 2;
}

message Game {
  string game = 1;
  string slug = 2;
  int64 workers = 3;
  repeated string channels = 4;
  bool autoFarm = 5;
}

message UpdateAccountsRequest {
  repeated string campaigns = 1;
  repeated string tokens = 2;
  repeated string drops = 3;
}

message AddGameRequest {
  string game = 1;
  string slug = 2;
  int64 workers = 3;
}

message Token {
  string username = 1;
  string password = 2;
  string oauth = 3;
}

message AccountWithData {
  Token token = 1;
  repeated string Campaigns = 2;
  repeated string drops = 3;
  string game = 4;
  int64 id = 5;
}

message AddAccountsRequest {
  repeated Token accounts = 1;
  string game = 2;
}

message RunGameRequest {
  string slug = 1;
  int64 workers = 2;
  repeated string tokens = 3;
  bool autoFarm = 4;
}

message RunChannelsRequest {
  repeated string channels = 1;
  int64 workers = 2;
  repeated string tokens = 3;
  bool watchChannelsAfterDropsClaiming = 4;
  string slug = 5;
}

message StopRequest { string slug = 1; }

message GetActiveGamesInfoResponse { repeated GameInfo games = 1; }

message GameInfo {
  int64 activeWorkers = 1;
  string currentChannel = 2;
  int64 leftToWatch = 3;
  int64 successCount = 4;
  string name = 5;
  string slug = 6;
}